# Level-5 games / Dark Cloud (2021/10/08)
# original script by aluigi, modified by RetingencyPlan
# ---
# in every Level-5 game on the PS2, there was this
# self-contained archvial file whose format
# kinda changed across many of their releases.

get EXT extension

if EXT == "HED"
    # Dark Cloud (PS2) - strangely enough, data.hed comes from the full USA release of the game
	open FDDE "DAT" 1
	get hed_size asize # necessary because of how simple this format is, later HD# formats put a delimiter of sorts to tell the game that there's no files to read beyond that point.
	xmath files "hed_size / 0x50" # calculate the number of files through the hed_size value
	for i = 0 < files
		getdstring file_name 0x40 # garbage leaks everywhere
		get file_offset long
		get file_size long
		get file_offset_in_cdvd_sectors long
		math file_offset_in_cdvd_sectors << 11
		if file_offset != file_offset_in_cdvd_sectors
		    break
		endif
		get file_size_in_cdvd_sectors long
		math file_size_in_cdvd_sectors << 11
		callfunction check_file_size 1
		log file_name file_offset file_size 1
	next i
elif EXT == "HD2"
    # Dark Cloud (PS2) - data.hd2, used elsewhere including the aforementioned USA release
	open FDDE "DAT" 1
	for
		get name_offset long
		savepos temp_01
		goto name_offset
		get file_name string
		if file_name == "" # when i said "delimiter of sorts" i meant EXACTLY that, if the file_name value contains literally nothing, that's it.
		    break
		endif
		goto temp_01
		get hd2_02 long # always 0
		if hd2_02 != 0
		    break
		endif
		get hd2_03 long # ditto
		if hd2_03 != 0
		    break
		endif
		get hd2_04 long # ditto
		if hd2_04 != 0
		    break
		endif
		get file_offset long
		get file_size long
		get file_offset_in_cdvd_sectors long
		math file_offset_in_cdvd_sectors << 11
		if file_offset != file_offset_in_cdvd_sectors
		    break
		endif
		get file_size_in_cdvd_sectors long
		math file_size_in_cdvd_sectors << 11
		callfunction check_file_size 1
		log file_name file_offset file_size 1
	next
elif EXT == "HD3"
    # Dark Chronicle/Dark Cloud 2 (PS2)
	open FDDE "DAT" 1
	for
		get name_offset long
		savepos temp_01
		goto name_offset
		get file_name string
		if file_name == ""
		    break
		endif
		goto temp_01
		get file_size long
		get file_offset long
		math file_offset << 11
		get file_size_in_cdvd_sectors long
		math file_size_in_cdvd_sectors << 11
		callfunction check_file_size 1
		log file_name file_offset file_size 1
	next
elif EXT == "HD4"
    # Dark Chronicle/Dark Cloud 2 (PS2)
	open FDDE "DAT" 1
	for
		get name_offset long
		savepos temp_01
		goto name_offset
		get file_name string
		if file_name == ""
		    break
		endif
		goto temp_01
		get file_size long
		get file_offset long
		math file_offset << 11
		log file_name file_offset file_size 1
	next
elif EXT == "HD5"
	# Dragon Quest VIII Premium Eizou Disc (SLPM-62490)
	open FDDE "DAT" 1
	for
		get name_offset long
		get file_02 long # always 0
		if file_02 != 0
		    break
		endif
		get file_size_01 long
		get file_size_02 long
		get file_offset long
		if file_size_01 != file_size_02
		    break
		endif
		if file_size_01 == 0 && file_size_02 == 0
			break
		endif
		savepos temp_01
		goto name_offset
		get file_name string
		goto temp_01
		math file_offset << 11
		log file_name file_offset file_size_01 1
	next
elif EXT == "HD6"
    # Dragon Quest VIII (PS2)
    # Rogue Galaxy (PS2)
	open FDDE "DAT" 1
	idstring "HD6\0"
	get keyword_info_offset long
	get keyword_info_size long
	get total_keywords long
	get hd6_04 long
	get keyword_fetch_offset long
	get keyword_fetch_size long
	get hd6_07 long
	get hd6_08 long
	get files long
	get file_info_offset long
	get hd6_11 long
	get hd6_size long
	goto keyword_info_offset
	for a = 0 < total_keywords
		get keyword string
		putarray 0 a keyword
	next a
	goto file_info_offset
	for i = 0 < files
		getdstring hd6_file_info 8
		getvarchr byte_01 hd6_file_info 0 byte
		getvarchr byte_02 hd6_file_info 1 byte
		getvarchr byte_03 hd6_file_info 2 byte
		getvarchr byte_04 hd6_file_info 3 byte
		getvarchr byte_05 hd6_file_info 4 byte
		getvarchr byte_06 hd6_file_info 5 byte
		getvarchr byte_07 hd6_file_info 6 byte
		getvarchr byte_08 hd6_file_info 7 byte
		set file_name string ""
		xmath name_offset "(((byte_03 & 0x03) << 16) | (byte_02 << 8) | byte_01) & 0x3ffff"
		math name_offset + keyword_fetch_offset
		savepos temp_01
		goto name_offset
		do
			savepos temp_02
			get keyword_number variable4
			getarray keyword 0 keyword_number
			string file_name + keyword
		while keyword_number != 0
		goto temp_01
		xmath file_offset "((byte_05 << 14) | (byte_04 << 6) | (byte_03 >> 2)) & 0x3fffff"
		math file_offset << 11
		xmath file_size "((byte_08 << 16) | (byte_07 << 8) | byte_06) & 0xffffff"
		math file_size << 4
		if file_size != 0
			log file_name file_offset file_size 1
		endif
	next i
else
	print " this script can only work with .hed/.hd2/.hd3/.hd4/.hd5/.hd6 files at this point. "
	cleanexit
endif

startfunction check_file_size
	# what this function does is it compares one file size value to another
	# with the DVD block size number as a basis to do the comparison from.
	# although, given that the game streams everything from disk
	# this is simply here for information sake.
	xmath modulus1 "2048 - (file_size_in_cdvd_sectors % 2048)"
	xmath modulus2 "2048 - (file_size % 2048)"
	if modulus1 == modulus2
	    print " file size is aligned to a multiple of 2048 (DVD sector size) "
	else
	    string wv1 p "%s blank spaces" modulus2
	    print " file size is short of %wv1% "
	endif
endfunction
